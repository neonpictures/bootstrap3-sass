@use "mixins/reset-text";
@use "mixins/vendor-prefixes";
@use "variables";

@use "sass:color";

//
// Popovers
// --------------------------------------------------


.popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: variables.$zindex-popover;
  display: none;
  max-width: variables.$popover-max-width;
  padding: 1px;
  // Our parent element can be arbitrary since popovers are by default inserted as a sibling of their target element.
  // So reset our font and text properties to avoid inheriting weird values.
  @include reset-text.reset-text;
  font-size: variables.$font-size-base;
  background-color: variables.$popover-bg;
  background-clip: padding-box;
  border: 1px solid variables.$popover-fallback-border-color;
  border: 1px solid variables.$popover-border-color;
  border-radius: variables.$border-radius-large;
  @include vendor-prefixes.box-shadow(0 5px 10px rgba(0, 0, 0, .2));

  // Offset the popover to account for the popover arrow
  &.top { margin-top: -(variables.$popover-arrow-width); }
  &.right { margin-left: variables.$popover-arrow-width; }
  &.bottom { margin-top: variables.$popover-arrow-width; }
  &.left { margin-left: -(variables.$popover-arrow-width); }

  // Arrows
  // .arrow is outer, .arrow:after is inner
  > .arrow {
    border-width: variables.$popover-arrow-outer-width;

    &,
    &:after {
      position: absolute;
      display: block;
      width: 0;
      height: 0;
      border-color: transparent;
      border-style: solid;
    }

    &:after {
      content: "";
      border-width: variables.$popover-arrow-width;
    }
  }

  &.top > .arrow {
    bottom: -(variables.$popover-arrow-outer-width);
    left: 50%;
    margin-left: -(variables.$popover-arrow-outer-width);
    border-top-color: variables.$popover-arrow-outer-fallback-color; // IE8 fallback
    border-top-color: variables.$popover-arrow-outer-color;
    border-bottom-width: 0;
    &:after {
      bottom: 1px;
      margin-left: -(variables.$popover-arrow-width);
      content: " ";
      border-top-color: variables.$popover-arrow-color;
      border-bottom-width: 0;
    }
  }
  &.right > .arrow {
    top: 50%;
    left: -(variables.$popover-arrow-outer-width);
    margin-top: -(variables.$popover-arrow-outer-width);
    border-right-color: variables.$popover-arrow-outer-fallback-color; // IE8 fallback
    border-right-color: variables.$popover-arrow-outer-color;
    border-left-width: 0;
    &:after {
      bottom: -(variables.$popover-arrow-width);
      left: 1px;
      content: " ";
      border-right-color: variables.$popover-arrow-color;
      border-left-width: 0;
    }
  }
  &.bottom > .arrow {
    top: -(variables.$popover-arrow-outer-width);
    left: 50%;
    margin-left: -(variables.$popover-arrow-outer-width);
    border-top-width: 0;
    border-bottom-color: variables.$popover-arrow-outer-fallback-color; // IE8 fallback
    border-bottom-color: variables.$popover-arrow-outer-color;
    &:after {
      top: 1px;
      margin-left: -(variables.$popover-arrow-width);
      content: " ";
      border-top-width: 0;
      border-bottom-color: variables.$popover-arrow-color;
    }
  }

  &.left > .arrow {
    top: 50%;
    right: -(variables.$popover-arrow-outer-width);
    margin-top: -(variables.$popover-arrow-outer-width);
    border-right-width: 0;
    border-left-color: variables.$popover-arrow-outer-fallback-color; // IE8 fallback
    border-left-color: variables.$popover-arrow-outer-color;
    &:after {
      right: 1px;
      bottom: -(variables.$popover-arrow-width);
      content: " ";
      border-right-width: 0;
      border-left-color: variables.$popover-arrow-color;
    }
  }
}

.popover-title {
  padding: 8px 14px;
  margin: 0; // reset heading margin
  font-size: variables.$font-size-base;
  background-color: variables.$popover-title-bg;
  border-bottom: 1px solid color.adjust(variables.$popover-title-bg, $lightness: -5%, $space: hsl);
  border-radius: (variables.$border-radius-large - 1) (variables.$border-radius-large - 1) 0 0;
}

.popover-content {
  padding: 9px 14px;
}
